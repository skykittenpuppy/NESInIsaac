<shaders>
  <shader name="NES Shader">
    <parameters>
      <param name="Palette" type="vec3[]"/>
      <param name="Pixels" type="int[]"/>
      <param name="test" type="vec3"/>
    </parameters>
    <vertex>
      <![CDATA[
      attribute vec3 Position;
      attribute vec4 Color;
      attribute vec2 TexCoord;
      attribute vec4 RenderData;
      attribute float Scale;

      //const int ScreenX = 256;
      //const int ScreenY = 240;
      //attribute vec3[32] Palette;
      const vec3[32] PaletteC = vec3[](vec3(0,0,0),vec3(1,0,0),vec3(0,1,0),vec3(0,0,1),
                                      vec3(1,0,0),vec3(1,0,0),vec3(1,1,0),vec3(1,0,1),
                                      vec3(0,1,0),vec3(1,1,0),vec3(0,1,0),vec3(0,1,1),
                                      vec3(0,0,1),vec3(1,0,1),vec3(0,1,1),vec3(0,0,1),
                                      vec3(0,0,0),vec3(0,0,0),vec3(0,0,0),vec3(0,0,0),
                                      vec3(0,0,0),vec3(0,0,0),vec3(0,0,0),vec3(0,0,0),
                                      vec3(0,0,0),vec3(0,0,0),vec3(0,0,0),vec3(0,0,0),
                                      vec3(0,0,0),vec3(0,0,0),vec3(0,0,0),vec3(1,1,1)
      );
      //attribute int[ScreenX*ScreenY] Pixels;
    
      varying vec4 Color0;
      varying vec2 TexCoord0;
      varying vec4 RenderDataOut;
      varying float ScaleOut;
      varying vec3[32] PaletteOut;
      //varying int[ScreenX*ScreenY] PixelsOut;
      
      uniform mat4 Transform;
    
      void main(void)
      {
        RenderDataOut = RenderData;
        ScaleOut = Scale;           // Passing data to fragment shader
        PaletteOut = PaletteC;       // Passing data to fragment shader
        //PixelsOut = Pixels;         // Passing data to fragment shader
        Color0 = Color;
        TexCoord0 = TexCoord;
        gl_Position = Transform * vec4(Position.xyz, 1.0);
      }
      ]]>
    </vertex>
    <fragment>
      <![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            const int ScreenX = 256;
            const int ScreenY = 240;
            varying vec3[32] PaletteOut;
            //varying int[ScreenX*ScreenY] PixelsOut;
            uniform sampler2D Texture0;
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                //Color.r = floor(TexCoord0.x*ScreenX)/ScreenX;
                //Color.g = floor(TexCoord0.y*ScreenY)/ScreenY;
                //Color.b = testOut.z;
                vec2 pixelIndex = vec2(mod(TexCoord0.x*ScreenX, PaletteOut.length()),
                                       mod(TexCoord0.y*ScreenY, PaletteOut.length()));
                //Color.rgb = PaletteOut[pixelIndex.x].xyz;
                //Color.rgb = vec3(pixelIndex.x, pixelIndex.y, 1.0f);
                gl_FragColor = Color;
            }
        ]]>
    </fragment>
  </shader>
</shaders>